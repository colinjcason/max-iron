generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

model User {
  id                String             @id @default(cuid())
  firstName         String?
  lastName          String?
  email             String?            @unique
  createdAt         DateTime           @default(now()) @map("created_at")
  updatedAt         DateTime           @updatedAt @map("updated_at")
  completedWorkouts CompletedWorkout[]
  workoutPlans      WorkoutPlan[]

  @@map("users")
}

model WorkoutPlan {
  id                String             @id @default(cuid())
  name              String
  createdAt         DateTime           @default(now())
  active            Boolean            @default(true)
  userId            String
  completedWorkouts CompletedWorkout[]
  scheduleDays      ScheduleDay[]
  user              User               @relation(fields: [userId], references: [id])
}

model ScheduleDay {
  id               String            @id @default(cuid())
  dayOfWeek        Int
  workoutType      String
  workoutPlanId    String
  workoutPlan      WorkoutPlan       @relation(fields: [workoutPlanId], references: [id])
  workoutTemplates WorkoutTemplate[]
}

model Exercise {
  id               String            @id @default(cuid())
  name             String
  category         String
  description      String?
  exerciseSets     ExerciseSet[]
  workoutTemplates WorkoutTemplate[]
}

model WorkoutTemplate {
  id            String      @id @default(cuid())
  scheduleDayId String
  exerciseId    String
  order         Int
  defaultSets   Int
  defaultReps   Int
  defaultWeight Float?
  exercise      Exercise    @relation(fields: [exerciseId], references: [id])
  scheduleDay   ScheduleDay @relation(fields: [scheduleDayId], references: [id])
}

model CompletedWorkout {
  id            String        @id @default(cuid())
  workoutDate   DateTime
  completedAt   DateTime      @default(now())
  userId        String
  workoutPlanId String
  user          User          @relation(fields: [userId], references: [id])
  workoutPlan   WorkoutPlan   @relation(fields: [workoutPlanId], references: [id])
  exerciseSets  ExerciseSet[]
}

model ExerciseSet {
  id                 String           @id @default(cuid())
  setNumber          Int
  reps               Int
  weight             Float
  notes              String?
  completedWorkoutId String
  exerciseId         String
  completedWorkout   CompletedWorkout @relation(fields: [completedWorkoutId], references: [id])
  exercise           Exercise         @relation(fields: [exerciseId], references: [id])
}
