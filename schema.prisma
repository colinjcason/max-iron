// schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model User {
  id            String       @id @default(cuid())
  name          String?
  email         String?      @unique
  createdAt     DateTime     @default(now()) @map(name: "created_at")
  updatedAt     DateTime     @updatedAt @map(name: "updated_at")
  workoutPlans  WorkoutPlan[]
  completedWorkouts CompletedWorkout[]
  @@map(name: "users")
}

model WorkoutPlan {
  id          String        @id @default(cuid())
  name        String
  createdAt   DateTime      @default(now())
  active      Boolean       @default(true)
  user        User          @relation(fields: [userId], references: [id])
  userId      String
  scheduleDays ScheduleDay[]
  completedWorkouts CompletedWorkout[]
}

model ScheduleDay {
  id              String        @id @default(cuid())
  dayOfWeek       Int          // 0-6 for Sunday-Saturday
  workoutType     String       // "REST", "LEGS", "PUSH", "PULL", etc.
  workoutPlan     WorkoutPlan  @relation(fields: [workoutPlanId], references: [id])
  workoutPlanId   String
  workoutTemplates WorkoutTemplate[]
}

model Exercise {
  id              String        @id @default(cuid())
  name            String
  category        String
  description     String?
  workoutTemplates WorkoutTemplate[]
  exerciseSets    ExerciseSet[]
}

model WorkoutTemplate {
  id              String      @id @default(cuid())
  scheduleDay     ScheduleDay @relation(fields: [scheduleDayId], references: [id])
  scheduleDayId   String
  exercise        Exercise    @relation(fields: [exerciseId], references: [id])
  exerciseId      String
  order           Int
  defaultSets     Int
  defaultReps     Int
  defaultWeight   Float?
}

model CompletedWorkout {
  id              String        @id @default(cuid())
  workoutDate     DateTime
  completedAt     DateTime      @default(now())
  user            User          @relation(fields: [userId], references: [id])
  userId          String
  workoutPlan     WorkoutPlan   @relation(fields: [workoutPlanId], references: [id])
  workoutPlanId   String
  exerciseSets    ExerciseSet[]
}

model ExerciseSet {
  id                  String           @id @default(cuid())
  setNumber           Int
  reps                Int
  weight              Float
  notes               String?
  completedWorkout    CompletedWorkout @relation(fields: [completedWorkoutId], references: [id])
  completedWorkoutId  String
  exercise            Exercise         @relation(fields: [exerciseId], references: [id])
  exerciseId          String
}